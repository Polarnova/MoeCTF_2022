from Crypto.Util.number import *
q = 12408795636519868275579286477747181009018504169827579387457997229774738126230652970860811085539129972962189443268046963335610845404214331426857155412988073
p = 12190036856294802286447270376342375357864587534233715766210874702670724440751066267168907565322961270655972226761426182258587581206888580394726683112820379
c = 68960610962019321576894097705679955071402844421318149418040507036722717269530195000135979777852568744281930839319120003106023209276898286482202725287026853925179071583797231099755287410760748104635674307266042492611618076506037004587354018148812584502385622631122387857218023049204722123597067641896169655595
e = 65537
n = p*q

def AMM(x, e, p):
    assert p%e !=0 and (p-1) % e == 0
    y = 2
    assert not (pow(y, (p - 1) // e, p) == 1)
    s = p // e
    k = 1
    while ((s * k + 1) % e != 0):
        k += 1
    a = pow(y,  s, p)
    root = pow(x, (s * k + 1) // e, p)
    for i in range(e):
        item = root * pow(a, i, p) % p
        txt = long_to_bytes(item)
        if b'moectf' in txt:
            return txt

ans = AMM(c, e, p)

print(ans)